BSAS (Beam Synchronous Acquisition Service) provides timestamp and pulse ID
aligned waveform data to the high-level application. Different from BSA, that
provides the data in separate waveforms, BSAS uses NTTable PV to make a
structured data format in a 2-D table.

There are multiple rows on the NTTable. All data in a row is aligned with a
specific timestamp and pulse ID. Each row corresponds to statistical
calculations made with one of more data points collected between one row and
the other. For example, if 10 data points are in use for the calculations, row1
will contain statistical data from the first 10 points, row2 will contain
statistical data from the next 10 points, so far so on.

Of course, if the row contains data from one single data point, then the data
on that row is the straight data itself, without any calculations. We are
calling this case as "non-statistical data".

The number of data points used per row depends on how the rates are configured
for the BSAS service.

There are multiple columns on the NTTable PV: timestamp-seconds, 
timestamp-nonoseconds, pulse ID and one or more signal columns. The number of
signal columns is configurable and is always a sub-set of the signals created
with the addBsa() and addSlaveBsa() commands explained in the main README file.

Each signal column is actually a group of 5 columns:
    .CNT: number of accumulated samples in the row
          for statistical data     .CNT >= 2
          for non-statistical data .CNT = 1
    .VAL: delegate sample (very first sample in the row for the statistical
          data)
    .AVG: arithmetic mean of the samples
    .RMS: standard deviation of the samples
    .MIN: minimum value from the samples
    .MAX: maximum value from the samples

Before it sounds more confusing, it is better to provide a few examples. Let's 
work with the position X signal for the BPM. The PV correspondent to the signal
is, for example, BPM:GUNB:123:X.

Here's the header of the table that will be generated by BSAS with this
example:

secondsPastEpoch | nanoseconds | pulseId | BPM:GUNB:123:X.CNT | BPM:GUNB:123:X.VAL | BPM:GUNB:123:X.AVG | BPM:GUNB:123:X.RMS | BPM:GUNB:123:X.MIN | BPM:GUNB:123:X.MAX

Unless you have a large monitor, the text probably wrapped to another line. So,
just to make it more legible in this README file, allow me to call the entire
BPM:GUNB:123:X PV as just X. This is a better view of the header:

secondsPastEpoch | nanoseconds | pulseId | X.CNT | X.VAL | X.AVG | X.RMS | X.MIN | X.MAX

Let's say that with a given configuration, each row is formed with statistical
data from 10 data points. This would be a table filled with a few rows:

secondsPastEpoch | nanoseconds | pulseId     | X.CNT | X.VAL | X.AVG | X.RMS | X.MIN | X.MAX
--------------------------------------------------------------------------------------------
   104239        |  660001087  | 96793970000 |  10   |  0.63 | 0.59  | 0.61  | 0.34  |  0.72
   104239        |  660010087  | 96793970010 |  10   |  0.56 | 0.57  | 0.60  | 0.41  |  0.65

The BPM has 3 signals: X, Y, and TMIT:
  - BPM:GUNB:123:X
  - BPM:GUNB:123:Y
  - BPM:GUNB:123:TMIT

With just 3 signals, the header will already be huge:

secondsPastEpoch | nanoseconds | pulseId | BPM:GUNB:123:X.CNT | BPM:GUNB:123:X.VAL | BPM:GUNB:123:X.AVG | BPM:GUNB:123:X.RMS | BPM:GUNB:123:X.MIN | BPM:GUNB:123:X.MAX | BPM:GUNB:123:Y.CNT | BPM:GUNB:123:Y.VAL | BPM:GUNB:123:Y.AVG | BPM:GUNB:123:Y.RMS | BPM:GUNB:123:Y.MIN | BPM:GUNB:123:Y.MAX | BPM:GUNB:123:TMIT.CNT | BPM:GUNB:123:TMIT.VAL | BPM:GUNB:123:TMIT.AVG | BPM:GUNB:123:TMIT.RMS | BPM:GUNB:123:TMIT.MIN | BPM:GUNB:123:TMIT.MAX

Once the table gets to 100 rows, you already get 2,100 cells on the table. You
can easily see that the idea for this service is not for a human being to look
at the table and take conclusions.

The idea here is to have a software to read this data and perform data analysis
on it.

Later you will see that bsaDriver provides PVs to configure 4 different
timing filters. Although the PVs reside on the IOC, the records are connected
to a central IOC using the DOL and OMSL fields of each record. This guarantees
that all IOCs running BSAS will run with the same timing filter.

The central configuration is done at the TPG Support IOC and there's a team
that decides how to configure each of the four available filters. There are no
user defined filters, like in BSA and BSSS.


Timing filtering and how it affects the counts on a table 
---------------------------------------------------------

Although the timing filters are configured by a responsible team, it's good to
understand how this is done.

There are 3 rates that need to be configured:
  - Acquisition Rate: frequency at which the firmware will read a signal.
  - Row Advance: frequency at which the statistical calculation stops for the
                 current row and starts for the next row.
  - Table Reset: frequency at which the entire table is replaced with a new
                 content.

Let's say that we configured the acquisition rate at 1 kHz. This just means
that the firmware will read all signals 1000 times per second. If this is a
BPM, it means that X, Y, and TMIT will be read 1000 times per second.

Now, we configure Row Advance to 100 Hz. This means that the firmware will only
go to the next row after 100 Hz. What happens during this time? 10 data points
are collected for X, Y, and TMIT. So, you can see how this configuration of
rates made the count per row to be 10. The AVG, RMS, MIN, and MAX will be
calculated over these 10 points, and the CNT column will show 10.

Finally, let's configure the Table Reset rate to 1 Hz. What happens during this
1 second? 100 rows are created during 1 second and, then, the entire table
current available to pvget is thrown away and a new table content with new 100
rows are made available. So, the relation between the Row Advance rate and the
Table Reset rate defines how many rows a table will have.

More information about how to view the table with pvget will be shown later.

If you are interested in a complete BSAS design and implementation detail
explanation, please check up the following slide deck:

https://1drv.ms/p/s!AsH0Qpew48nUh7xfkO4-X_lMj48VmA?e=6Ea8FP




# ===================================================
# Include Support for EPICS version 7
# Link QSRV (pvAccess Server) if available
# ===================================================
<your application>_LIBS += qsrv
<your application>_LIBS += $(EPICS_BASE_PVA_CORE_LIBS)
<your applicaiton>_DBD  += PVAServerRegister.dbd
<your application>_DBD  += qsrv.dbd





Load BSAS rate control template in st.cmd
---------------------------------------------

This database provides:
- a PV to stop the BSAS service locally.
- PVs with diagnostic data from the firmware.
- PVs used for timing filtering. These PVs are not meant to be altered locally
and should not be shown to the user on the GUIs. These PVs are tied to the
TPG support IOC application with the DOL and OMSL record fields.
There's a hidden ${GLOBAL} macro that defaults to TPG:SYS0:1. This matches the
dev TPG in B34 and also in production. If you are using a different TPG, you
need to redefine ${GLOBAL} with the correct prefix of the TPG.
Example: GLOBAL=TPG:B15:1

# BSAS Destination/Rates Control PVs
# TPR_PREFIX can be, for example:
# TPR:LiI24:BP01:1
dbLoadRecords("db/bsasCtrl.db", "DEV=${TPR_PREFIX},PORT=bsasPort")


Load BSAS channel control (enable/disable, signal filtering) template in st.cmd
-----------------------------------------------------------------------------------

This database provides a mechanism to enable/disable and to select severity
for each signal individually.

Examples of prefixes:
DEVICE1_PREFIX = BPM:GUNB:123
DEVICE2_PREFIX = BPM:GUNB:345

# BSAS Severity Filtering for each signal
dbLoadRecords("db/bsas.db", "DEV=${DEVICE1_PREFIX},PORT=bsasPort,BSAKEY=TMITAMC0,SECN=TMIT")
dbLoadRecords("db/bsas.db", "DEV=${DEVICE1_PREFIX},PORT=bsasPort,BSAKEY=XFIXEDPAMC0,SECN=X")
dbLoadRecords("db/bsas.db", "DEV=${DEVICE1_PREFIX},PORT=bsasPort,BSAKEY=YFIXEDPAMC0,SECN=Y")

dbLoadRecords("db/bsas.db", "DEV=${DEVICE2_PREFIX},PORT=bsasPort,BSAKEY=TMITAMC1,SECN=TMIT")
dbLoadRecords("db/bsas.db", "DEV=${DEVICE2_PREFIX},PORT=bsasPort,BSAKEY=XFIXEDPAMC1,SECN=X")
dbLoadRecords("db/bsas.db", "DEV=${DEVICE2_PREFIX},PORT=bsasPort,BSAKEY=YFIXEDPAMC1,SECN=Y")

4. make association with BSA to inherit the BSA data channels
-------------------------------------------------------------

#
#  Initialize BSSS driver
#  make assoication with BSA channels: bsssAssociateBsaChannels(<BSA port name>)
bsssAssociateBsaChannels("bsaPort")


5. make mapping between data channel and base name
--------------------------------------------------

The base name will be used for the column lable in the NTTable
ex) column lable will be <base_name>.CNT, <base_name>.VAL, <base_name>.AVG, <base_name>.RMS, <base_name>.MIN, <base_name>.MAX


#  base name assign for the BSAS channels
# DEVICE_PREFIX can be, for example:
# BPM:LI24:123 
#  bsasBaseName(<BSAS data channel, BsaKey>, <base PV name>)
bsasBaseName("PIDL",    "${DEVICE_PREFIX}:PIDL")
bsasBaseName("PIDU",    "${DEVICE_PREFIX}:PIDLU")
bsasBaseName("TSL",     "${DEVICE_PREFIX}:TSL")
bsasBaseName("TSU",     "${DEVICE_PREFIX}:TSU")
bsasBaseName("RATES",   "${DEVICE_PREFIX}:RATES")


6. configure BSAS driver
------------------------

# configure BSAS driver: bsasAsynDriverConfigure(<bsas port>, <register path>, <NTTable PV1>, <NTTable PV2>, <NTTable PV3>, <NTTable PV4>, [named_root (optional)])
# remarks) ioc shell does NOT allow multiple-line input for a command, thus, we need to list up all of the arguments in a sngle line
# DEVICE_PREFIX can be, for example:
# BPM:LI24:123 
bsasAsynDriverConfigure("bsasPort", "mmio/AmcCarrierCore/AmcCarrierBsa/Bsas", "${DEVICE_PREFIX}:NTTBL1", "${DEVICE_PREFIX}:NTTBL2", "${DEVICE_PREFIX}:NTTBL3","${DEVICE_PREFIX}:NTTBL4" )



7. Programming NTTable rate
---------------------------
Please, check up the slide deck above to understand the rate control operation

8. checking up BSAS driver status
---------------------------------

ex) use dbior() command on the ioc shell

sioc-b084-ts02>dbior bldStreamDriver 1
Driver: bldStreamDriver
        BLD Stream for MyRoot0
          read size  : 768
          read count : 11785893
          bld count  : 0
          bsss count : 118033
          bsas count : 11667845
          bld callback : (nil)
          bld_usr      : (nil)
          bsss_callback: 0x8136a0
          bsss_usr     : 0x13d9dd0
          bsas_callback: 0x8165a0
          bsas_usr     : 0x152bf60
          free list    : 0x14b8660
          bld  callback processing (usec): snapshot    0.000, min    0.000, max    0.000
          bsss callback processing (usec): snapshot  553.818, min  444.024, max 1122.685
          bsas callback processing (usec): snapshot    3.097, min    0.694, max 1461.080
                 --------------------------------
                 BSSSS Packet: size(156)
                 --------------------------------
                 timestamp, nsec  :  dff5c81
                 timestamp, sec   : 3ce80602
                 pulse id, lower  : 2f2da330
                 pulse id, upper  :     f499
                 channel mask     : 7fffffff
                 service mask     :        1
                 severity mask    : 3faa5500ffaa5500
                 --------------------------------
                 BSAS Packet: size(768)
                 --------------------------------
                 timestamp (64bit): 3ce806020f396321
                 pulse id  (64bit):     f4992f2dedd6
                 channel mask     : 7fffffff
                 row number       : 821
                 table_count      : 0
                 edef_index       : 0
                 byte pad (0x80)  : 80
                 PL CH    CNT EVL ESQ FIX     VAL       SUM       SQUARE      MIN      MAX
                 -------------------------------------------------------------------------
                  0  0      1   N   E   N 2f2dedd6  f2dedd6    3b8a1eee4 2f2dedd6 2f2df163
                  1  1      1   E   E   N 809359f4   9359f4     6bb39090 809359f4 80935d81
                  2  2      1   N   E   N  11359f4  11359f4     6bb39090  11359f4  1135d81
                  3  3      1   E   E   N 819359f4  19359f4     6bb39090 819359f4 81935d81
                  4  4      1   N   E   N  21359f4  21359f4     6bb39090  21359f4  2135d81
                  5  5      1   E   E   N 829359f4  29359f4     6bb39090 829359f4 82935d81
                  6  6      1   N   E   N  31359f4  31359f4     6bb39090  31359f4  3135d81
                  7  7      1   E   E   N 839359f4  39359f4     6bb39090 839359f4 83935d81
                  8  8      1   N   E   N  41359f4  41359f4     6bb39090  41359f4  4135d81
                  9  9      1   E   E   N 849359f4  49359f4     6bb39090 849359f4 84935d81
                 10 10      1   N   E   N  51359f4  51359f4     6bb39090  51359f4  5135d81
                 11 11      1   E   E   N 859359f4  59359f4     6bb39090 859359f4 85935d81
                 12 12      1   N   E   N  61359f4  61359f4     6bb39090  61359f4  6135d81
                 13 13      1   E   E   N 869359f4  69359f4     6bb39090 869359f4 86935d81
                 14 14      1   N   E   N  71359f4  71359f4     6bb39090  71359f4  7135d81
                 15 15      1   E   E   N 879359f4  79359f4     6bb39090 879359f4 87935d81
                 16 16      0   N   E   F  81359f4        0            0  81359f4  8135d81
                 17 17      0   E   E   F 889359f4        0            0 889359f4 88935d81
                 18 18      0   N   E   F  91359f4        0            0  91359f4  9135d81
                 19 19      0   E   E   F 899359f4        0            0 899359f4 89935d81
                 20 20      0   N   E   F  a1359f4        0            0  a1359f4  a135d81
                 21 21      0   E   E   F 8a9359f4        0            0 8a9359f4 8a935d81
                 22 22      0   N   E   F  b1359f4        0            0  b1359f4  b135d81
                 23 23      0   E   E   F 8b9359f4        0            0 8b9359f4 8b935d81
                 24 24      0   N   E   F  c1359f4        0            0  c1359f4  c135d81
                 25 25      0   E   E   F 8c9359f4        0            0 8c9359f4 8c935d81
                 26 26      0   N   E   F  d1359f4        0            0  d1359f4  d135d81
                 27 27      0   E   E   F 8d9359f4        0            0 8d9359f4 8d935d81
                 28 28      0   N   E   F  e1359f4        0            0  e1359f4  e135d81
                 29 29      0   E   E   F 8e9359f4        0            0 8e9359f4 8e935d81
                 30 30      0   N   E   F  f1359f4        0            0  f1359f4  f135d81
sioc-b084-ts02>


9. read out NTTtable
--------------------

- get pv list in a host
  pvlist <host>

ex)
khkim@lcls-dev3 ~ $ pvlist cpu-b084-sp18
TST:SYS2:4:NTTBL1
TST:SYS2:4:NTTBL2
TST:SYS2:4:NTTBL3
TST:SYS2:4:NTTBL4


- check up pv structure
  pvinfo <pv name, NTTable PV name>
ex)
khkim@lcls-dev3 ~ $ pvinfo TST:SYS2:4:NTTBL1
TST:SYS2:4:NTTBL1
Server: 134.79.217.42:5075
Type:
    epics:nt/NTTable:1.0
        string[] labels
        structure value
            uint[] secondsPastEpoch
            uint[] nanoseconds
            ulong[] pulseId
            uint[] pv0_cnt
            double[] pv0_val
            double[] pv0_avg
            double[] pv0_rms
            double[] pv0_min
            double[] pv0_max
            uint[] pv1_cnt
            double[] pv1_val
            double[] pv1_avg
            double[] pv1_rms
            double[] pv1_min
            double[] pv1_max
            uint[] pv2_cnt
            double[] pv2_val
            double[] pv2_avg
            double[] pv2_rms
            double[] pv2_min
            double[] pv2_max


            uint[] pv30_cnt
            double[] pv30_val
            double[] pv30_avg
            double[] pv30_rms
            double[] pv30_min
            double[] pv30_max


- get data from the NTTable PV
  pvget <pv name, NTTable PV name>

ex)
  pvget TST:SYS2:4:NTTBL1








# End of file

-------------------------------------
Beamline data acquisition (BLD)
--------------------------------------

BLD is implemented as a part of BSA driver in R2.5.0 or later.
Thus ioc engineer does not need to add up ".dbd" file and library file if the ioc already had BSA.

0. need to define BLD stream in 000TopLevel.yaml
--------------------------------------------------

# BLD Stream
bldstream: &bldstream
  SRP:
    protocolVersion: SRP_UDP_NONE
  UDP:
    port: 8198
    numRxThreads: *udpThreads
    threadPriority:  *udpPri
    pollSecs: 1

#  Inside NetIoDev session
     bldstream:
       class: Field
       at:
         <<: *bldstream


1. need to install database template (add folowings in Db/Makefile)
--------------------------------------------------

DB_INSTALLS += $(BSADRIVER)/db/bld.db
DB_INSTALLS += $(BSADRIVER)/db/bldCtrl.db

- bld.db ;  BLD database template for each BLD data channel
- bldCtrl.db  ; BLD controls database template 


2. load up BLD control data base template in st.cmd
--------------------------------------------------

example)
# BLD Control/Monintoring PVs
# TPR_PREFIX can be, for example:
# TPR:LI24:123 
# There's a hidden ${GLOBAL} macro that defaults to TPG:SYS0:1. This matches the
# dev TPG in B34 and also in production. If you are using a different TPG, you
# need to redefine ${GLOBAL} with the correct prefix of the TPG.
# Example: GLOBAL=TPG:B15:1
dbLoadRecords("db/bldCtrl.db", "DEV=${TPR_PREFIX},PORT=bldPort")



3. load up BLD Scalar PVs (for each channel data)
--------------------------------------------------

example)
# BLD Scalar PVs
# DEVICE_PREFIX can be, for example:
# BPM:LI24:123 
dbLoadRecords("db/bld.db", "DEV=${DEVICE_PREFIX},PORT=bldPort,BSAKEY=PIDL,SECN=PIDL")
dbLoadRecords("db/bld.db", "DEV=${DEVICE_PREFIX},PORT=bldPort,BSAKEY=PIDU,SECN=PIDU")
dbLoadRecords("db/bld.db", "DEV=${DEVICE_PREFIX},PORT=bldPort,BSAKEY=TSL,SECN=TSL")
dbLoadRecords("db/bld.db", "DEV=${DEVICE_PREFIX},PORT=bldPort,BSAKEY=TSU,SECN=TSU")
dbLoadRecords("db/bld.db", "DEV=${DEVICE_PREFIX},PORT=bldPort,BSAKEY=RATES,SECN=RATES")
......
remark) use the same macros what we have used for BSA template. 

4. make association with BSA channel 
--------------------------------------------------

BLD can use BSA channel definitions. Use the following command to make association with BSA channels after bsaAsynDriverConfigure() command

#
#  Initialize BLD driver
#  make assoication with BSA channels: bldAssociateBsaChannels(<BSA port name>)
bldAssociateBsaChannels("bsaPort")

remark) the <BSA port name> should be the smae string id which has been used for bsaASynDriverConfigure()

5. configure BLD driver with the following command
--------------------------------------------------

# configure BLD driver: bldAsynDriverConfigure(<bld port>, <register path>, <payload pva basename>)
bldAsynDriverConfigure("bldPort", "mmio/AmcCarrierCore/AmcCarrierBsa/Bld", "TST:SYS2:04")

remark) the register path should be different depending on the application

In case the BSAKEY is not desired to be used in the name/type PVA, a name for the BLD channel can
be created using the following function.

bldChannelName(<BSAKEY>,   <NAME/ALIAS>)

Example)
bldChannelName("YFIXEDPAMC1",   "POSY")

6. Report function
--------------------------------------------------

- bldStream
epics>dbior bldStreamDriver 5
Driver: bldStreamDriver
        BLD Stream for MyRoot0
          read size  : 768
          read count : 7960928
          bld count  : 7695234
          bsss count : 1131
          bsas count : 193179
          bld callback : 0x62e5c0
          bld_usr      : 0x187f310
          bsss_callback: 0x62e370
          bsss_usr     : 0x14e4b80
          bsas_callback: 0x631710
          bsas_usr     : 0x18a3930
          free list    : 0x16a8780
          bld  callback processing (usec): snapshot   15.496, min   14.167, max   39.318
          bsss callback processing (usec): snapshot 1074.218, min  968.287, max 4042.424
          bsas callback processing (usec): snapshot    5.948, min    4.807, max 1241.223
                 --------------------------------
                 BSSS Packet: size(768)
                 --------------------------------
                 timestamp, nsec  : 13f39b57
                 timestamp, sec   : 3d9550d1
                 pulse id, lower  : 4e45bad3
                 pulse id, upper  :     fded
                 channel mask     : 7fffffff
                 service mask     : 801e033d
                 severity mask    :   b9098100b90981
                 --------------------------------
                 BSAS Packet: size(768)
                 --------------------------------
                 timestamp (64bit): 3d9550d114892497
                 pulse id  (64bit):     fded4e45de5f
                 channel mask     : 7fffffff
                 row number       : 839
                 table_count      : 14
                 edef_index       : 0
                 byte pad (0x80)  : 80
                 PL CH    CNT EVL ESQ FIX     VAL       SUM       SQUARE      MIN      MAX
                 -------------------------------------------------------------------------
                  0  0      1   N   N   N    1de5f    1de5f    37de6e741    1de5f    1de5f
                  1  1      1   N   N   N    12d0d    12d0d    1620792a9    12d0d    12d0d
                  2  2      1   N   N   N    12d0d    12d0d    1620792a9    12d0d    12d0d
                  3  3      1   N   N   N    12d0d    12d0d    1620792a9    12d0d    12d0d
                  4  4      1   N   N   N    12d0d    12d0d    1620792a9    12d0d    12d0d
                  5  5      1   N   N   N    12d0d    12d0d    1620792a9    12d0d    12d0d
                  6  6      1   N   N   N    12d0d    12d0d    1620792a9    12d0d    12d0d
                  7  7      1   N   N   N    12d0d    12d0d    1620792a9    12d0d    12d0d
                  8  8      1   N   N   N    12d0d    12d0d    1620792a9    12d0d    12d0d
                  9  9      1   N   N   N    12d0d    12d0d    1620792a9    12d0d    12d0d
                 10 10      1   N   N   N    12d0d    12d0d    1620792a9    12d0d    12d0d
                 11 11      1   N   N   N    12d0d    12d0d    1620792a9    12d0d    12d0d
                 12 12      1   N   N   N    12d0d    12d0d    1620792a9    12d0d    12d0d
                 13 13      1   N   N   N    12d0d    12d0d    1620792a9    12d0d    12d0d
                 14 14      1   N   N   N    12d0d    12d0d    1620792a9    12d0d    12d0d
                 15 15      1   N   N   N    12d0d    12d0d    1620792a9    12d0d    12d0d
                 16 16      0   N   E   F   b92d0d        0            0   b92d0d   b92d0d
                 17 17      0   N   E   F   b92d0d        0            0   b92d0d   b92d0d
                 18 18      0   N   E   F   b92d0d        0            0   b92d0d   b92d0d
                 19 19      0   N   E   F   b92d0d        0            0   b92d0d   b92d0d
                 20 20      0   N   E   F   b92d0d        0            0   b92d0d   b92d0d
                 21 21      0   N   E   F   b92d0d        0            0   b92d0d   b92d0d
                 22 22      0   N   E   F   b92d0d        0            0   b92d0d   b92d0d
                 23 23      0   N   E   F   b92d0d        0            0   b92d0d   b92d0d
                 24 24      0   N   E   F   b92d0d        0            0   b92d0d   b92d0d
                 25 25      0   N   E   F   b92d0d        0            0   b92d0d   b92d0d
                 26 26      0   N   E   F   b92d0d        0            0   b92d0d   b92d0d
                 27 27      0   N   E   F   b92d0d        0            0   b92d0d   b92d0d
                 28 28      0   N   E   F   b92d0d        0            0   b92d0d   b92d0d
                 29 29      0   N   E   F   b92d0d        0            0   b92d0d   b92d0d
                 30 30      0   N   E   F   b92d0d        0            0   b92d0d   b92d0d
                 --------------------------------
                 BLD Packet: size(156)
                 --------------------------------
                 timestamp        : 3d9550d1149818b7
                 pulse ID         :     fded4e45e1ed
                 channel mask     :         7fffffff
                 service mask     :          8000000
                 Chan. data found :               31
                 Severity mask    : 3faa5500ffaa5500


- serviceAsynDriver
epics> dbior serviceAsynDriver 1
Driver: serviceAsynDriver
named_root: MyRoot0, port: bsssPort, driver instace: 0x14e4b80, number of channels: 31
named_root: MyRoot0, port: bldPort, driver instace: 0x187f310, number of channels: 31


7. Slope and offset
--------------------------------------------------

The slope and offset for BLD are those of the BSA as mentioned earlier.

  $(DEV):$(SECN)_SLOPE
  $(DEV):$(SECN)_OFFSET

8. Simple Test
--------------------------------------------------

All BLD EDEFs are system EDEFs. They should automatically get their configuration from the global PVs.

Nonetheless, the user still need to perform the following settings

caput TST:SYS2:04:SCHBR:MULT_PORT 50000
caput TST:SYS2:04:SCHBR:MULT_ADDR 239.255.4.3
caput TST:SYS2:04:BLD_CTRL:ENB "Enable"            # Enabling BLD functionality in IOC

Now you should be able to capture the outgoing BLD packets using tcpdump
>>  /usr/sbin/tcpdump -i <interface> port 50000
To see the contents of the packet, run
>>  /usr/sbin/tcpdump -X -i <interface> port 50000

The channel types in the packets are reflected by the pv access PV <payload pva basename>:BLD_PAYLOAD
To uncover the correct full name, use the following command from the IOC terminal
IOCSHELL> pvxsl
<payload pva basename>:BLD_PAYLOAD

To examine its content, you can run from a linux terminal
pvinfo <payload pva basename>:BLD_PAYLOAD

remark) BLD PV names and descriptions in the following link:
https://confluence.slac.stanford.edu/pages/viewpage.action?spaceKey=~carolina&title=BLD+PVs

